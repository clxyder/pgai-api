services:
  db_service:
    container_name: db_container
    env_file:
      - .env
    image: timescale/timescaledb-ha:pg17
    restart: always
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./.docker/postgres:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    command: [ "-p", "${POSTGRES_PORT}", "-c", "ai.ollama_host=http://ollama_container:11434" ]
    expose:
      - "${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${POSTGRES_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 5
  vectorizer_worker_service:
    container_name: vectorizer_worker_container
    image: timescale/pgai-vectorizer-worker:latest
    env_file:
      - .env
    environment:
      PGAI_VECTORIZER_WORKER_DB_URL: postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db_container:${POSTGRES_PORT}/${POSTGRES_DB}
      OLLAMA_HOST: http://ollama_container:11434
    command: [ "--poll-interval", "5s", "--log-level", "DEBUG" ]
    depends_on:
      db_service:
        condition: service_healthy
  fastapi_service:
    container_name: fastapi_container
    env_file:
      - .env
    restart: always
    build:
      context: ./
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./:/usr/src/app
    depends_on:
      db_service:
        condition: service_healthy
    environment:
      - POSTGRES_HOST=db_container
    stdin_open: true
    tty: true
  ollama_service:
    container_name: ollama_container
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama

volumes:
  db_data:
  ollama_data:
